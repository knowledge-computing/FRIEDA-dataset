from django.db import models

VALIDITY_CHOICES = [
    ("Can be answered", "Can be answered"),
    ("Map doesn't contain information to answer the question", "Map doesn't contain information to answer the question"),
]

MAP_COUNT_CHOICES = [("Single", "Single"), ("Multi", "Multi")]

SPATIAL_REL_CHOICES = [
    ("Border", "Border"),
    ("Distance", "Distance"),
    ("Equal", "Equal"),
    ("Orientation", "Orientation"),
    ("Intersect", "Intersect"),
    ("Within", "Within"),
]

class User(models.Model):
    user_id = models.CharField(max_length=64, primary_key=True)
    name = models.CharField(max_length=128)

class SurveyResponse(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    # Internal question reference (generated by frontend), not shown to users
    question_ref = models.CharField(max_length=64)

    # Internal metadata (not shown on page, stored from hidden fields)
    question_text = models.TextField(null=True, blank=True)
    map_count = models.CharField(max_length=8, choices=MAP_COUNT_CHOICES, null=True, blank=True)
    spatial_relationship = models.CharField(max_length=16, choices=SPATIAL_REL_CHOICES, null=True, blank=True)

    # User inputs
    answer = models.TextField(blank=True)
    validity = models.CharField(max_length=128, choices=VALIDITY_CHOICES, null=True, blank=True)
    necessary = models.CharField(max_length=3, blank=True)  # 'yes' | 'no' (Multi only), optional
    noinfo_reason = models.TextField(blank=True, null=True)

    timestamp = models.DateTimeField(auto_now_add=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(fields=['user', 'question_ref'], name='uniq_user_questionref')
        ]